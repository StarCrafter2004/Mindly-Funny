import { Context } from "telegraf";
import { Telegraf } from "telegraf";
import { api } from "../../api/axiosInstance";
import fs from "fs";
import path from "path";

export function registerStartCommand(bot: Telegraf<Context>) {
  bot.start(async (ctx) => {
    const telegram_id = Number(ctx.from.id);
    const firstName = ctx.from.first_name;
    const lastName = ctx.from.last_name;
    const username = ctx.from.username;
    const parts = ctx.message.text.split(" ");
    const param = parts[1]; // —Ç–µ–ø–µ—Ä—å —Ç—É—Ç –º–æ–∂–µ—Ç –±—ã—Ç—å ref-123 –∏–ª–∏ promo-someApp

    let referrer_id: number | null = null;
    let promo: string | null = null;

    if (param) {
      const [key, value] = param.split("-");

      if (key === "ref" && value) {
        referrer_id = Number(value);
      } else if (key === "promo" && value) {
        promo = value;
      }
    }
    let documentId: string | null = null;

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userRes = await api.get("/api/t-users/info", {
        params: { "filters[telegram_id][$eq]": telegram_id },
      });

      if (!userRes.data.data || userRes.data.data.length === 0) {
        // —Å–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const createRes = await api.post("/api/t-users/bot", {
          data: { telegram_id, firstName, lastName, username },
        });
        documentId = createRes.data.data.documentId;
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω, documentId:", documentId);
      } else {
        documentId = userRes.data.data[0].documentId;
        console.log("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, documentId:", documentId);
      }
    } catch (err) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ—Ñ–µ—Ä–∞–ª
    if (referrer_id) {
      if (telegram_id === referrer_id) {
        await ctx.reply("–ù–µ–ª—å–∑—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–≤–æ—é –∂–µ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É.");
      } else {
        try {
          await api.post(`/api/referrals`, {
            data: {
              user_id: telegram_id,
              referrer_id,
            },
          });
          await ctx.reply("–í—ã –±—ã–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ!");
        } catch (err: any) {
          if (err.response?.status === 400) {
            await ctx.reply("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞.");
          } else {
            await ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–∞.");
            console.error(err.message);
          }
        }
      }
    }

    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–æ
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–º–æ
    if (promo && documentId) {
      try {
        await api.put(`/api/t-users/bot/${documentId}`, {
          data: { promo },
        });
      } catch (err) {
        console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ–º–æ:", err);
      }
    }

    // –í—Å–µ–≥–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º, –∫–Ω–æ–ø–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
    const imagePath = path.join(__dirname, "../../assets/image.png");
    const imageBuffer = fs.readFileSync(imagePath);

    await ctx.replyWithPhoto(
      { source: imageBuffer },
      {
        caption:
          "üé≠ Open the app where every quiz feels like a mini-show!\n\n" +
          "In just 3 minutes you‚Äôll get your personal meme-diagnosis ü§Ø\n" +
          "and the perfect reason for a story üì±‚ú®\n\n" +
          "Quizzes on all kinds of topics: anime üéå, movies üé¨,\n" +
          "relationships ‚ù§Ô∏è and more üåç\n\n" +
          "Open it ‚Äî and find out who you are today üîÆ",
        reply_markup: {
          inline_keyboard: [
            [
              {
                text: "Open miniapp",
                web_app: { url: `${process.env.PUBLIC_URL}` },
              },
            ],
          ],
        },
      }
    );
  });
}
